{"version":3,"file":"static/js/404.13d753fe.chunk.js","mappings":"yOA4EA,WAAeA,EAAAA,EAAAA,IAlEC,WACd,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA2BC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAK,IAArDC,EAAO,EAAPA,QAASC,EAAK,EAALA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,YAAa,IAEfC,iBAAkBC,EAAAA,EAClBC,SAAU,SAACC,GACT,IAAMC,EAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3BrB,GACEsB,EAAAA,EAAAA,IAAW,CAAEJ,GAAAA,EAAIN,MAAOK,EAAOL,MAAOC,YAAaI,EAAOJ,eAEzDU,SACAC,MAAK,WACJjB,EAAS,IACX,IACCkB,OAAM,SAACnB,GACNoB,QAAQC,IAAIrB,EACd,GACJ,IAGF,OACE,UAAC,IAAI,CAACU,SAAUP,EAAOmB,aAAa,WAClC,UAAC,UAAU,CAACC,UAAU,OAAM,WAC1B,SAAC,UAAU,qBACX,SAAC,YAAY,CACXC,KAAK,OACLC,YAAY,QACZC,KAAK,QACLC,MAAOxB,EAAOQ,OAAOL,MACrBsB,SAAUzB,EAAO0B,aACjBC,YAAa3B,EAAO4B,OAAOzB,SAE7B,SAAC,qBAAqB,CAACkB,KAAK,UAAS,SAClCrB,EAAO4B,OAAOzB,YAGnB,UAAC,UAAU,CAACiB,UAAU,OAAM,WAC1B,SAAC,UAAU,2BACX,SAAC,YAAY,CACXS,GAAG,WACHP,YAAY,cACZQ,KAAM,EACNP,KAAK,cACLC,MAAOxB,EAAOQ,OAAOJ,YACrBqB,SAAUzB,EAAO0B,aACjBC,YAAa3B,EAAO4B,OAAOxB,eAE7B,SAAC,qBAAqB,CAACiB,KAAK,UAAS,SAClCrB,EAAO4B,OAAOxB,kBAGnB,SAAC,IAAO,CAACR,QAASA,EAASC,MAAOA,EAAM,UACtC,SAAC,IAAM,CAACkC,QAAQ,UAAUV,KAAK,SAAQ,wBAM/C,G,qECxEaf,EAAa0B,EAAAA,KAAaC,MAAM,CAC3C9B,MAAO6B,EAAAA,KACJE,IAAI,EAAG,yBACPC,IAAI,GAAI,wBACRC,SAAS,0BACZhC,YAAa4B,EAAAA,KAAaI,SAAS,2B,wDCGrC,IARkB,SAACC,GAKjB,OAJgB,SAACC,GAEf,OADuB7C,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM6C,IAAI,IAAhDC,YACY,SAACH,GAAS,UAAKC,IAAY,uBACjD,CAEF,C","sources":["pages/AddPost.jsx","util/validationSchema.js","util/withGuard.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { insertPost } from \"../state/postSlice\";\r\nimport { useFormik } from \"formik\";\r\nimport { postSchema } from \"../util/validationSchema\";\r\n\r\nimport Loading from \"../components/Loading\";\r\nimport withGuard from \"../util/withGuard\";\r\n\r\nconst AddPost = () => {\r\n  const dispatch = useDispatch();\r\n  const { loading, error } = useSelector((state) => state.posts);\r\n  const navigate = useNavigate();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      title: \"\",\r\n      description: \"\",\r\n    },\r\n    validationSchema: postSchema,\r\n    onSubmit: (values) => {\r\n      const id = Math.floor(Math.random() * 200);\r\n      dispatch(\r\n        insertPost({ id, title: values.title, description: values.description })\r\n      )\r\n        .unwrap()\r\n        .then(() => {\r\n          navigate(\"/\");\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit}>\r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Title</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          name=\"title\"\r\n          value={formik.values.title}\r\n          onChange={formik.handleChange}\r\n          isInvalid={!!formik.errors.title}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {formik.errors.title}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Description</Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          placeholder=\"Description\"\r\n          rows={3}\r\n          name=\"description\"\r\n          value={formik.values.description}\r\n          onChange={formik.handleChange}\r\n          isInvalid={!!formik.errors.description}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {formik.errors.description}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n      <Loading loading={loading} error={error}>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Loading>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default withGuard(AddPost);\r\n","import * as Yup from \"yup\";\r\n\r\nexport const postSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .min(2, \"Character is to Short\")\r\n    .max(30, \"Character is to Long\")\r\n    .required(\"This field is Required\"),\r\n  description: Yup.string().required(\"This field is Required\"),\r\n});\r\n","import { useSelector } from \"react-redux\";\r\n\r\nconst withGuard = (Component) => {\r\n  const Wrapper = (props) => {\r\n    const { isLoggedIn } = useSelector((state) => state.auth);\r\n    return isLoggedIn ? <Component {...props} /> : \"Please Sign in first \";\r\n  };\r\n  return Wrapper;\r\n};\r\n\r\nexport default withGuard;\r\n"],"names":["withGuard","dispatch","useDispatch","useSelector","state","posts","loading","error","navigate","useNavigate","formik","useFormik","initialValues","title","description","validationSchema","postSchema","onSubmit","values","id","Math","floor","random","insertPost","unwrap","then","catch","console","log","handleSubmit","className","type","placeholder","name","value","onChange","handleChange","isInvalid","errors","as","rows","variant","Yup","shape","min","max","required","Component","props","auth","isLoggedIn"],"sourceRoot":""}