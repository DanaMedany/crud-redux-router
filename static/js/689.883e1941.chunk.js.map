{"version":3,"file":"static/js/689.883e1941.chunk.js","mappings":"uKAgBA,IAXuB,WACrB,IAAMA,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAmCE,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAK,IAA7DC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAKzB,OAJAC,EAAAA,EAAAA,YAAU,WACRV,GAASW,EAAAA,EAAAA,IAAWT,GACtB,GAAG,CAACF,EAAUE,IAEP,CAAEK,OAAAA,EAAQC,QAAAA,EAASC,MAAAA,EAC5B,C,yJCyEA,WAAeG,EAAAA,EAAAA,IA3EE,WACf,OAAmCC,EAAAA,EAAAA,KAA3BN,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAK,EAALA,MACnBT,GAAWC,EAAAA,EAAAA,MACXa,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAOZ,EAASA,EAAOY,MAAQ,GAC/BC,YAAab,EAASA,EAAOa,YAAc,IAE7CC,iBAAkBC,EAAAA,EAClBC,oBAAoB,EACpBC,SAAU,SAACC,GACTzB,GACE0B,EAAAA,EAAAA,IAAS,CACPxB,GAAIK,EAAOL,GACXiB,MAAOM,EAAON,MACdC,YAAaK,EAAOL,eAGrBO,SACAC,MAAK,WACJd,EAAS,IACX,IACCe,OAAM,SAACpB,GACNqB,MAAM,sBAAuBrB,EAC/B,GACJ,IASF,OANAC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLV,GAAS+B,EAAAA,EAAAA,MACX,CACF,GAAG,CAAC/B,KAGF,UAAC,IAAI,CAACwB,SAAUR,EAAOgB,aAAa,WAClC,UAAC,UAAU,CAACC,UAAU,OAAM,WAC1B,SAAC,UAAU,qBACX,SAAC,YAAY,CACXC,KAAK,OACLC,YAAY,QACZC,KAAK,QACLC,MAAOrB,EAAOS,OAAON,MACrBmB,SAAUtB,EAAOuB,aACjBC,YAAaxB,EAAOyB,OAAOtB,SAE7B,SAAC,qBAAqB,CAACe,KAAK,UAAS,SAClClB,EAAOyB,OAAOtB,YAGnB,UAAC,UAAU,CAACc,UAAU,OAAM,WAC1B,SAAC,UAAU,2BACX,SAAC,YAAY,CACXS,GAAG,WACHC,KAAM,EACNP,KAAK,cACLC,MAAOrB,EAAOS,OAAOL,YACrBkB,SAAUtB,EAAOuB,aACjBC,YAAaxB,EAAOyB,OAAOrB,eAE7B,SAAC,qBAAqB,CAACc,KAAK,UAAS,SAClClB,EAAOyB,OAAOrB,kBAGnB,SAAC,IAAO,CAACZ,QAASA,EAASC,MAAOA,EAAM,UACtC,SAAC,IAAM,CAACmC,QAAQ,UAAUV,KAAK,SAAQ,wBAM/C,G,qECnFaZ,EAAauB,EAAAA,KAAaC,MAAM,CAC3C3B,MAAO0B,EAAAA,KACJE,IAAI,EAAG,yBACPC,IAAI,GAAI,wBACRC,SAAS,0BACZ7B,YAAayB,EAAAA,KAAaI,SAAS,2B,wDCGrC,IARkB,SAACC,GAKjB,OAJgB,SAACC,GAEf,OADuB/C,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM+C,IAAI,IAAhDC,YACY,SAACH,GAAS,UAAKC,IAAY,uBACjD,CAEF,C","sources":["hooks/usePostDetails.js","pages/EditPost.jsx","util/validationSchema.js","util/withGuard.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { detailPost } from \"../state/postSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst UsePostDetails = () => {\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n  const { record, loading, error } = useSelector((state) => state.posts);\r\n  useEffect(() => {\r\n    dispatch(detailPost(id));\r\n  }, [dispatch, id]);\r\n\r\n  return { record, loading, error };\r\n};\r\n\r\nexport default UsePostDetails;\r\n","import Loading from \"../components/Loading\";\r\nimport UsePostDetails from \"../hooks/usePostDetails\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport { postSchema } from \"../util/validationSchema\";\r\n\r\nimport { cleanRecord, editPost } from \"../state/postSlice\";\r\nimport withGuard from \"../util/withGuard\";\r\n\r\nconst EditPost = () => {\r\n  const { record, loading, error } = UsePostDetails();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      title: record ? record.title : \"\",\r\n      description: record ? record.description : \"\",\r\n    },\r\n    validationSchema: postSchema,\r\n    enableReinitialize: true,\r\n    onSubmit: (values) => {\r\n      dispatch(\r\n        editPost({\r\n          id: record.id,\r\n          title: values.title,\r\n          description: values.description,\r\n        })\r\n      )\r\n        .unwrap()\r\n        .then(() => {\r\n          navigate(\"/\");\r\n        })\r\n        .catch((error) => {\r\n          alert(\"Error editing post!\", error);\r\n        });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(cleanRecord());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit}>\r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Title</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          name=\"title\"\r\n          value={formik.values.title}\r\n          onChange={formik.handleChange}\r\n          isInvalid={!!formik.errors.title}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {formik.errors.title}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n      <Form.Group className=\"mb-3\">\r\n        <Form.Label>Description</Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={3}\r\n          name=\"description\"\r\n          value={formik.values.description}\r\n          onChange={formik.handleChange}\r\n          isInvalid={!!formik.errors.description}\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {formik.errors.description}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n      <Loading loading={loading} error={error}>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Loading>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default withGuard(EditPost);\r\n","import * as Yup from \"yup\";\r\n\r\nexport const postSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .min(2, \"Character is to Short\")\r\n    .max(30, \"Character is to Long\")\r\n    .required(\"This field is Required\"),\r\n  description: Yup.string().required(\"This field is Required\"),\r\n});\r\n","import { useSelector } from \"react-redux\";\r\n\r\nconst withGuard = (Component) => {\r\n  const Wrapper = (props) => {\r\n    const { isLoggedIn } = useSelector((state) => state.auth);\r\n    return isLoggedIn ? <Component {...props} /> : \"Please Sign in first \";\r\n  };\r\n  return Wrapper;\r\n};\r\n\r\nexport default withGuard;\r\n"],"names":["dispatch","useDispatch","id","useParams","useSelector","state","posts","record","loading","error","useEffect","detailPost","withGuard","UsePostDetails","navigate","useNavigate","formik","useFormik","initialValues","title","description","validationSchema","postSchema","enableReinitialize","onSubmit","values","editPost","unwrap","then","catch","alert","cleanRecord","handleSubmit","className","type","placeholder","name","value","onChange","handleChange","isInvalid","errors","as","rows","variant","Yup","shape","min","max","required","Component","props","auth","isLoggedIn"],"sourceRoot":""}